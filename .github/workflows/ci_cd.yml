name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run unit tests
        run: echo "No unit tests yet..."

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Determine version tag
        id: version
        run: |
          VERSION="v1.0-${{ github.run_number }}"
          echo "::set-output name=version::$VERSION"
      
      - name: Build & push image
        run: |
          VERSION="v1.0-${{ github.run_number }}"
          echo "Building image with tag: $VERSION"
          docker build -t sillycatlover246/devproject:$VERSION .
          docker tag sillycatlover246/devproject:$VERSION sillycatlover246/devproject:latest
          docker push sillycatlover246/devproject:$VERSION
          docker push sillycatlover246/devproject:latest

      - name: Run integration tests
        run: |
          VERSION="v1.0-${{ github.run_number }}"
          echo "Running container from image tag: $VERSION for integration testing..."
          CONTAINER_ID=$(docker run -d -p 5000:5000 sillycatlover246/devproject:$VERSION)
          echo "Started container: $CONTAINER_ID"
          sleep 10
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000)
          echo "HTTP status code: $STATUS"
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID
          if [ "$STATUS" -ne 200 ]; then
            echo "Integration test failed. Expected HTTP 200, got $STATUS"
            exit 1
          fi

  deploy_infrastructure:
    needs: build_and_push
    runs-on: ubuntu-latest 
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform init, import, and apply
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        run: |
          cd terraform
          terraform init -upgrade
          terraform state list google_container_cluster.primary || \
            terraform import -input=false google_container_cluster.primary projects/devproject-451919/zones/us-central1-a/clusters/devproject-cluster || true
          terraform state list google_container_node_pool.primary_nodes || \
            terraform import -input=false google_container_node_pool.primary_nodes projects/devproject-451919/zones/us-central1-a/clusters/devproject-cluster/nodePools/devproject-cluster-node-pool || true
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

  deploy_app:
    needs: deploy_infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: devproject-451919
          install_components: 'kubectl'

      - name: Install GKE auth plugin
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install -y google-cloud-cli-gke-gcloud-auth-plugin

      - name: Get GKE credentials and deploy with Helm
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_BASE64 }}
        run: |
          printf '%s' "$SERVICE_ACCOUNT_JSON" | base64 -d > gcp.json
          gcloud auth activate-service-account --key-file=gcp.json
          gcloud container clusters get-credentials devproject-cluster --zone=us-central1-a --project=devproject-451919

          if [ -f "./helm/devproject/Chart.yml" ] && [ ! -f "./helm/devproject/Chart.yaml" ]; then
            cp "./helm/devproject/Chart.yml" "./helm/devproject/Chart.yaml"
            echo "Copied Chart.yml to Chart.yaml"
          fi

          if [ -d "./helm/devproject" ]; then
            helm upgrade --install devproject ./helm/devproject \
              --set image.repository=sillycatlover246/devproject \
              --set image.tag=latest \
              --set env.FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }} \
              --set service.type=LoadBalancer \
              --set service.port=5000 \
              --set service.targetPort=5000
          else
            CHART_DIR=$(find . -type d -name "devproject" | grep helm | head -n 1)
            if [ -n "$CHART_DIR" ]; then
              echo "Found Helm chart directory at: $CHART_DIR"
              helm upgrade --install devproject $CHART_DIR \
                --set image.repository=sillycatlover246/devproject \
                --set image.tag=latest \
                --set env.FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }} \
                --set service.type=LoadBalancer \
                --set service.port=5000 \
                --set service.targetPort=5000
            else
              echo "ERROR: Could not find Helm chart directory"
              exit 1
            fi
          fi

      - name: Display External IP
        run: |
          external_ip=""
          attempt=0
          while [ -z "$external_ip" ] && [ $attempt -lt 10 ]; do
            echo "Waiting for external IP assignment..."
            sleep 30
            external_ip=$(kubectl get svc devproject-svc -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            attempt=$((attempt+1))
          done

          if [ -z "$external_ip" ]; then
            echo "External IP not assigned yet. Check your service in the GCP Console."
            exit 1
          else
            echo "Click here: http://$external_ip:5000"
          fi

          echo "Running integration test against http://$external_ip:5000..."
          status=$(curl -s -o /dev/null -w "%{http_code}" http://$external_ip:5000)
          echo "HTTP status code: $status"
          if [ "$status" != "200" ]; then
            echo "Integration test failed. Expected HTTP 200, got $status"
            exit 1
          fi
